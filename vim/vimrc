" == Common settings ==
set nocompatible		" Disable vi compatibility
set title				" Display filename in title bar
set number				" Show line number
set ruler				" Show cursor position
set showcmd				" Show incomplete command
syntax on				" Syntax coloration

" == Cursor ==
set mouse=a				" Enable mouse support
set cursorline			" Show cursorline
set nowrap				" Don't wrap text on multiple lines
set scrolloff=7			" Display minimum X lines around the cursor
set sidescrolloff=10		" Display minimum X columns around the cursor

" == Indentation ==
set noexpandtab			" Disable tab to spaces
set autoindent			" Same indent as previous lines
set smartindent			" Auto-indentation in while, if, etc...
set tabstop=4			" 4 column by tab
set shiftwidth=4		" Auto-indent with 4 columns
set softtabstop=4		" 4 column by tab

" == Vim menu ==
set wildmenu			" Enhance vim menu completion
set wildignore+=*/tmp/*,*.so,*.swp,*.a,a.out,*.o,*~,*.pyc

" == Search ==
set history=500			" 500 command line history
set ignorecase			" Ignore case in search
set smartcase			" Don't ignore case when capitale is typed
set incsearch			" Highlight typed word during typing
set hlsearch			" Highlight typed word

" == Theme ==
set t_Co=256
"colorscheme desert		" Enable desert theme
colorscheme mustang		" Enable mustang theme
"highlight Normal ctermfg=white
highlight LineNr ctermbg=234 ctermfg=239
"highlight CursorLine term=underline cterm=None ctermbg=234

" == Vundle (PLUGINS MANAGER) ==
filetype off							" Required for vundle
set rtp+=~/.vim/bundle/Vundle.vim	" Vundle setup
call vundle#begin()						" Vundle setup
Bundle 'gmarik/vundle.vim'
Bundle 'Syntastic'
Bundle 'ctrlp.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'AutoComplPop'
call vundle#end()						" Vundle setup
filetype plugin indent on				" Required for vundle

" Clang Complete Settings
let g:clang_auto_select = 1
let g:clang_complete_auto = 1
let g:clang_hl_errors = 1
let g:clang_user_options = '-I includes -I * -I srcs -I srcs/* -Wall -Wextra -std=c++11 -stdlib=libc++ || exit 0'
let g:clang_use_library = 1
let g:clang_library_path = '/usr/lib'

let g:clang_snippets_engine = 'clang_complete'
let g:clang_snippets = 1
let g:clang_conceal_snippets = 1

let g:clang_hl_errors = 1

"let g:clang_complete_copen=1
let g:clang_complete_macros=1
let g:clang_complete_patterns=1

let g:clang_memory_percent = 70
set conceallevel=2
set concealcursor=vin
set completeopt=menu,longest

map <c-a> :call g:ClangUpdateQuickFix()<CR>

" == Syntastic customizations ==
let g:syntastic_c_check_header = 1
let g:syntastic_c_auto_refresh_includes = 1
let g:syntastic_c_compiler = 'clang'
let b:syntastic_c_cflags = '-I includes -I * -I srcs -I srcs/* -Wall -Wextra'
let g:syntastic_c_include_dirs = [ 'includes', '../includes' ]
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-I includes -I * -I srcs -I srcs/* -Wall -Wextra -std=c++11 -stdlib=libc++'
let g:syntastic_disabled_filetypes = ['o', 'a']

" == Lokaltog customisation ==
set laststatus=2					" Always show status line

" == Auto .h protect ==
function! s:insert_gates()
let getname = substitute(toupper(expand("%:t")), "\\.", "_", "g")
	execute "normal! i#ifndef " . getname
	execute "normal! o# define " . getname
	execute "normal! o"
	execute "normal! Go#endif"
	normal! kk
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()
autocmd BufNewFile *.{h,hpp} :3

" == Mapping ==
nmap <c-x> :w<cr>
nmap <c-c> :q<cr>
nmap <c-e> :Exp<cr>
nmap <c-b> :CtrlPBuffer<cr>
"map <C-n> :NERDTreeToggle<CR>

let mapleader="\\"
nmap <silent> <leader>ev :edit $HOME/.vimrc<CR>		" Edit vimrc
nmap <silent> <leader>sv :source $HOME/.vimrc<CR>		" Source vimrc
"nmap <silent> <leader>ev :edit $HOME/.myvimrc<CR>		" Edit myvimrc
"nmap <silent> <leader>sv :source $HOME/.myvimrc<CR>	" Source myvimrc


" == Misc ==
set showmatch			" Show matching bracket
set matchtime=10		" Show matching bracket for 1 second

" == Norme C 42==

set colorcolumn=80

highlight normec42 ctermbg=red ctermfg=white guibg=#592929
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '^ ')				"espace au debut
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '  \+')				"double espace
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', ' \t')				"espace suivit de tab
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '\t ')				"tab suivit d'espace
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '[ \t]\+$')			"tab ou espace a la fin
"autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '\%>80v.\+')		"plus de 80 caracteres

"autocmd VimEnter * call s:actionForOpen()
"function! s:actionForOpen()
"`	let filename = expand('%:t')
"	NERDTree
"	!~/.Sublivim/installer.sh &
"	if !empty(filename)
"		wincmd l
"	endif
"endfunction

"autocmd BufCreate * call s:addingNewTab()
"function! s:addingNewTab()
"	let filename = expand('%:t')
"	if winnr('$') < 2 && exists('t:NERDTreeBufName') == 0
"		NERDTree
"		if !empty(filename)
"			wincmd l
"		endif
"	endif
"endfunction

"autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
"function! s:CloseIfOnlyNerdTreeLeft()
"	if exists("t:NERDTreeBufName")
"		if bufwinnr(t:NERDTreeBufName) != -1
"			if winnr("$") == 1
"				q
"			endif
"		endif
"	endif
"endfunction

" == Backups ==
"if isdirectory($HOME . '/.vim/backup') == 0
"	:silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
"endif
"set backupdir-=.
"set backupdir+=.
"set backupdir-=~/
"set backupdir^=~/.vim/backup/
"set backup

" == Swap files ==
"if isdirectory($HOME . '/.vim/swap') == 0
"	:silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
"endif
"set directory=~/.vim/swap//
"set directory+=.
