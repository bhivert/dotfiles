
" == Common settings ==
set nocompatible		" Disable vi compatibility
set title				" Display filename in title bar
set nu				" Show line number
"set relativenumber		" Show line number
autocmd InsertEnter * :set rnu		" set relativenumbre by entering in insert mode
autocmd InsertLeave * :set nornu	" unset relativenumbre by outgoing insert mode

set ruler				" Show cursor position
set showcmd				" Show incomplete command
syntax on				" Syntax coloration

" == Cursor ==
"set mouse=a				" Enable mouse support
set cursorline			" Show cursorline
set nowrap				" Don't wrap text on multiple lines
set scrolloff=7			" Display minimum X lines around the cursor
set sidescrolloff=10		" Display minimum X columns around the cursor

" == Indentation ==
set noexpandtab			" Disable tab to spaces
set autoindent			" Same indent as previous lines
set smartindent			" Auto-indentation in while, if, etc...
set tabstop=4			" 4 column by tab
set shiftwidth=4		" Auto-indent with 4 columns
set softtabstop=4		" 4 column by tab

" == Vim menu ==
set wildmenu			" Enhance vim menu completion
set wildignore+=*/tmp/*,*.so,*.swp,*.a,a.out,*.o,*~,*.pyc

" == Search ==
set history=500			" 500 command line history
set ignorecase			" Ignore case in search
set smartcase			" Don't ignore case when capitale is typed
set incsearch			" Highlight typed word during typing
set hlsearch			" Highlight typed word

" == Faster vim ==
set lazyredraw			" no reddraw cursorline
set ttyfast				" fast terminal

" == Misc ==
set showmatch			" Show matching bracket
set matchtime=10		" Show matching bracket for 1 second
set colorcolumn=80

" == Theme ==
set t_Co=256
colorscheme desert		" Enable desert theme
"colorscheme mustang		" Enable mustang theme
"colorscheme sos		" Enable mustang theme
"highlight Normal ctermfg=white
highlight LineNr ctermbg=234 ctermfg=239
highlight CursorLineNr ctermfg=yellow ctermbg=none
"highlight CursorLine term=underline cterm=None ctermbg=234

" == Vundle (PLUGINS MANAGER) ==
filetype off							" Required for vundle
set rtp+=~/.vim/bundle/Vundle.vim	" Vundle setup
call vundle#begin()						" Vundle setup
Plugin 'gmarik/vundle.vim'
Plugin 'Syntastic'
Plugin 'ctrlp.vim'
Plugin 'Lokaltog/vim-powerline'
Plugin 'Valloric/YouCompleteMe'
call vundle#end()						" Vundle setup
filetype plugin indent on				" Required for vundle

" == Syntastic customizations ==
let g:syntastic_c_check_header = 1
let g:syntastic_c_auto_refresh_includes = 1
let g:syntastic_c_compiler = 'clang'
let b:syntastic_c_cflags = '-Wall -Wextra'
"let g:syntastic_c_include_dirs = ['']

let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_auto_refresh_includes = 1
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-I. -I.. -Iinclude -I../include -Wall -Wextra -std=c++11'
"let g:syntastic_cpp_include_dirs = ['']
let g:syntastic_disabled_filetypes = ['o', 'a']

" let g:ycm_filepath_completion_use_working_dir = 1
" let g:ycm_min_num_identifier_candidate_chars = 0
" let g:ycm_semantic_triggers = {
" 			\	'c' : ['->', '.'],
" 			\	'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
" 			\	're!\[.*\]\s'],
" 			\	'ocaml' : ['.', '#'],
" 			\	'cpp,objcpp' : ['->', '.', '::'],
" 			\	'perl' : ['->'],
" 			\	'php' : ['->', '::'],
" 			\	'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
" 			\	'ruby' : ['.', '::'],
" 			\	'lua' : ['.', ':'],
" 			\	'erlang' : [':'],
" 			\ }

" == Lokaltog customisation ==
set laststatus=2					" Always show status line

autocmd FileType man set tabstop=8
runtime ftplugin/man.vim

" == Mapping ==
"nmap <c-x> :w<cr>
"nmap <c-c> :q<cr>
noremap <c-e> :Exp<cr>
noremap <silent> <C-t> :tabe.<cr>
noremap <silent> <C-n> :tabnext<cr>
noremap <silent> <C-p> :tabprevious<cr>
noremap <silent> <C-h> <C-w>h
noremap <silent> <C-l> <C-w>l
noremap <silent> <C-k> <C-w>k
noremap <silent> <C-j> <C-w>j
noremap <c-b> :CtrlPBuffer<cr>
noremap <silent> <S-k> :<C-U>exe "Man " . v:count1 . " <cword>"<CR><cr>

let mapleader="\\"
map <silent> <leader>ev :edit $HOME/.vimrc<CR>		" Edit vimrc
map <silent> <leader>sv :source $HOME/.vimrc<CR>		" Source vimrc
"map <silent> <leader>ev :edit $HOME/.myvimrc<CR>		" Edit myvimrc
"map <silent> <leader>sv :source $HOME/.myvimrc<CR>	" Source myvimrc

" Commenting blocks of code.
autocmd FileType c,cpp,java,scala	let comment_leader = '// '
autocmd FileType sh,ruby,python		let comment_leader = '# '
autocmd FileType conf,fstab			let comment_leader = '# '
autocmd FileType tex				let comment_leader = '% '
autocmd FileType mail				let comment_leader = '> '
autocmd FileType vim				let comment_leader = '" '
noremap <silent> <leader>cc :s/^\(.*\)$/\/\/ \1/<CR>:nohl<CR>
noremap <silent> <leader>cu :s/^\/\/ \(.*\)$/\1/<CR>:nohl<CR>

"noremap <silent> <leader>cc :s/^\(.*\)$/<C-R>=comment_leader<CR>\1/<CR>:nohl<CR>
"noremap <silent> <leader>cu :s/^<C-R>=comment_leader<CR>\(.*\)$/\1/<CR>:nohl<CR>

" == Norme C 42==
highlight normec42 ctermbg=red ctermfg=white guibg=#592929
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '^ ')				"espace au debut
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '  \+')				"double espace
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', ' \t')				"espace suivit de tab
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '\t ')				"tab suivit d'espace
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '[ \t]\+$')			"tab ou espace a la fin
"autocmd BufEnter *.{c,cpp,h,hpp} call matchadd ('normec42', '\%>80v.\+')		"plus de 80 caracteres

" == Auto .h protect ==
function! s:insert_gates()
let getname = substitute(toupper(expand("%:t")), "\\.", "_", "g")
	execute "normal! i#ifndef " . getname
	execute "normal! o# define " . getname
	execute "normal! o"
	execute "normal! Go#endif"
	normal! kk
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()
autocmd BufNewFile *.{h,hpp} :3

" Clang Complete Settings
"let g:clang_auto_select = 1
"let g:clang_complete_auto = 1
"let g:clang_hl_errors = 1
"let g:clang_user_options = '-I includes -I srcs -I srcs/* -I * -Wall -Wextra -std=c++11 || exit 0'
"let g:clang_use_library = 1
"let g:clang_library_path = '/usr/lib'
"
"let g:clang_snippets_engine = 'clang_complete'
"let g:clang_snippets = 1
"let g:clang_conceal_snippets = 1
"
"let g:clang_hl_errors = 1
"
""let g:clang_complete_copen=1
"let g:clang_complete_macros=1
"let g:clang_complete_patterns=1
"
"let g:clang_memory_percent = 70
"set conceallevel=2
"set concealcursor=vin
"set completeopt=menu,longest
"
"map <c-a> :call g:ClangUpdateQuickFix()<CR>

"autocmd VimEnter * call s:actionForOpen()
"function! s:actionForOpen()
"`	let filename = expand('%:t')
"	NERDTree
"	!~/.Sublivim/installer.sh &
"	if !empty(filename)
"		wincmd l
"	endif
"endfunction

"autocmd BufCreate * call s:addingNewTab()
"function! s:addingNewTab()
"	let filename = expand('%:t')
"	if winnr('$') < 2 && exists('t:NERDTreeBufName') == 0
"		NERDTree
"		if !empty(filename)
"			wincmd l
"		endif
"	endif
"endfunction

"autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
"function! s:CloseIfOnlyNerdTreeLeft()
"	if exists("t:NERDTreeBufName")
"		if bufwinnr(t:NERDTreeBufName) != -1
"			if winnr("$") == 1
"				q
"			endif
"		endif
"	endif
"endfunction

" == Backups ==
"if isdirectory($HOME . '/.vim/backup') == 0
"	:silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
"endif
"set backupdir-=.
"set backupdir+=.
"set backupdir-=~/
"set backupdir^=~/.vim/backup/
"set backup

" == Swap files ==
"if isdirectory($HOME . '/.vim/swap') == 0
"	:silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
"endif
"set directory=~/.vim/swap//
"set directory+=.
